// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __gdtools_RcppExports_h__
#define __gdtools_RcppExports_h__

#include "gdtools_types.h"
#include <Rcpp.h>

namespace gdtools {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("gdtools", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("gdtools", "gdtools_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in gdtools");
            }
        }
    }

    inline XPtrCairoContext context_create() {
        typedef SEXP(*Ptr_context_create)();
        static Ptr_context_create p_context_create = NULL;
        if (p_context_create == NULL) {
            validateSignature("XPtrCairoContext(*context_create)()");
            p_context_create = (Ptr_context_create)R_GetCCallable("gdtools", "gdtools_context_create");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_context_create();
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<XPtrCairoContext >(__result);
    }

    inline void context_set_font(XPtrCairoContext cc, std::string fontname, double fontsize, bool bold, bool italic) {
        typedef SEXP(*Ptr_context_set_font)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_context_set_font p_context_set_font = NULL;
        if (p_context_set_font == NULL) {
            validateSignature("void(*context_set_font)(XPtrCairoContext,std::string,double,bool,bool)");
            p_context_set_font = (Ptr_context_set_font)R_GetCCallable("gdtools", "gdtools_context_set_font");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_context_set_font(Rcpp::wrap(cc), Rcpp::wrap(fontname), Rcpp::wrap(fontsize), Rcpp::wrap(bold), Rcpp::wrap(italic));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<void >(__result);
    }

    inline FontMetric context_extents(XPtrCairoContext cc, std::string x) {
        typedef SEXP(*Ptr_context_extents)(SEXP,SEXP);
        static Ptr_context_extents p_context_extents = NULL;
        if (p_context_extents == NULL) {
            validateSignature("FontMetric(*context_extents)(XPtrCairoContext,std::string)");
            p_context_extents = (Ptr_context_extents)R_GetCCallable("gdtools", "gdtools_context_extents");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_context_extents(Rcpp::wrap(cc), Rcpp::wrap(x));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<FontMetric >(__result);
    }

}

#endif // __gdtools_RcppExports_h__
